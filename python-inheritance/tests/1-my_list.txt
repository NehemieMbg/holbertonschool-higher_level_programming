Text file for testing via doctest the Module 1 - My list
===========================================================
Using ``class My_list(list)`` and function ``print_sorted``
----------------------------------------------------------
First import the method:
>>> MyList = __import__('1-my_list').MyList

========== Success cases ==================
	# Prints the list
	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(4)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(5)
	>>> print(my_list)
	[1, 4, 2, 3, 5]

	# check with sorted list
	>>> my_list = MyList()
	>>> my_list.append(1)
	>>> my_list.append(2)
	>>> my_list.append(3)
	>>> my_list.append(4)
	>>> my_list.append(5)
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]

	# check with non sorted list
	>>> my_list = MyList()
	>>> my_list.append(5)
	>>> my_list.append(3)
	>>> my_list.append(4)
	>>> my_list.append(1)
	>>> my_list.append(2)
	>>> my_list.print_sorted()
	[1, 2, 3, 4, 5]

	# check with non sorted negative number list
	>>> my_list = MyList()
	>>> my_list.append(-2)
	>>> my_list.append(-1)
	>>> my_list.append(-4)
	>>> my_list.append(-5)
	>>> my_list.append(-3)
	>>> my_list.print_sorted()
	[-5, -4, -3, -2, -1]

	# check that print_sorted returns a new list
	>>> list = MyList()
	>>> list.append(7)
	>>> list.print_sorted()
	[7]
	>>> id(list) is not id(list.print_sorted())
	[7]
	True

	# check with an empty list
	>>> MyList = __import__('1-my_list').MyList
	>>> empty = MyList()
	>>> print(empty)
	[]
	>>> empty.print_sorted()
	[]

========== Failure cases ===================
	# bad types provided
	>>> my_list = MyList()
	>>> my_list.append(10)
	>>> my_list.append("my name is")
	>>> my_list.print_sorted()
	Traceback (most recent call last):
	...
	TypeError: '<' not supported between instances of 'str' and 'int'
