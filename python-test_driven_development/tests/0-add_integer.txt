The test text file for 0_add_integer
------------------------------------
Using ``0_add_integer`` 
=======================

	>>> add_integer = __import__('0-add_integer').add_integer

Successful cases:

Output expected for signed and unsigned int and floats:
	>>> add_integer(1, 2)
	3
	>>> add_integer(10, -8)
	2
	>>> add_integer(-8, 10)
	2
	>>> add_integer(2.5, 10)
	12
	>>> add_integer(2.5, 5.5)
	8


With default value b=98
	>>> add_integer(1)
	99

Failures expected:

	>>> add_integer("Biggi", 8)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer

	>>> add_integer("chong", "chong")
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
	>>> add_integer(None)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
	>>> add_integer(2e8000)
	Traceback (most recent call last):
	...
	OverflowError: cannot convert float infinity to integer
	>>> add_integer()
	Traceback (most recent call last):
	...
	TypeError: add_integer() missing 1 required positional argument: 'a'
	>>> add_integer(None)
	Traceback (most recent call last):
	...
	TypeError: a must be an integer
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	...
	ValueError: cannot convert float NaN to integer
